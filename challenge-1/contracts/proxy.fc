#include "imports/stdlib.fc";
#include "imports/op-codes.fc";
#include "imports/params.fc";
;; Proxy smart contract
;; The smart contract we will create should have the following functionality:

;; - Forward all incoming messages to the contract owner
;; - When forwarding, the sender's address should come first, followed by the original message body
;; - The value of Toncoin attached to the forwarded message should be equal to the value of the incoming message minus fees
;; - The owner's address is stored in the smart contract's storage
;; - When a message is sent to the contract by the owner, it should not be forwarded

;; storage scheme
;; - seems no storage needed as it is only forwarding

slice load_data () inline {
  var ds = get_data().begin_parse();
  return ds~load_msg_addr();
}

() save_data(slice owner_address, int next_item_index, cell content, cell nft_item_code, cell royalty_params) impure inline {
  set_data(begin_cell()
    .store_slice(owner_address)
    .store_uint(next_item_index, 64)
    .store_ref(content)
    .store_ref(nft_item_code)
    .store_ref(royalty_params)
    .end_cell());
}

;; cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
;;   cell data = begin_cell().store_uint(item_index, 64).store_slice(my_address()).end_cell();
;;   return begin_cell().store_uint(0, 2).store_dict(nft_item_code).store_dict(data).store_uint(0, 1).end_cell();
;; }

;; slice calculate_nft_item_address(int wc, cell state_init) {
;;   return begin_cell().store_uint(4, 3)
;;                      .store_int(wc, 8)
;;                      .store_uint(cell_hash(state_init), 256)
;;                      .end_cell()
;;                      .begin_parse();
;; }

;; () deploy_nft_item(int item_index, cell nft_item_code, int amount, cell nft_content) impure {
;;   cell state_init = calculate_nft_item_state_init(item_index, nft_item_code);
;;   slice nft_address = calculate_nft_item_address(workchain(), state_init);
;;   var msg = begin_cell()
;;             .store_uint(0x18, 6)
;;             .store_slice(nft_address)
;;             .store_coins(amount)
;;             .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
;;             .store_ref(state_init)
;;             .store_ref(nft_content);
;;   send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
;; }

;; () send_royalty_params(slice to_address, int query_id, slice data) impure inline {
;;   var msg = begin_cell()
;;     .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool packages:MsgAddress -> 011000
;;     .store_slice(to_address)
;;     .store_coins(0)
;;     .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
;;     .store_uint(op::report_royalty_params(), 32)
;;     .store_uint(query_id, 64)
;;     .store_slice(data);
;;   send_raw_message(msg.end_cell(), 64); ;; carry all the remaining value of the inbound message
;; }

;; low level call to check if 2 slices are the same.
int equal_slices (slice a, slice b) asm "SDEQ";

() recv_internal(int balance, int msg_value, cell in_msg_full, slice in_msg_body)  {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    slice owner_address = load_data();
    ;; ~ means bitwise not
    if ~ equal_slices(sender_address, owner_address) {
      cell msg_body_cell = begin_cell().store_slice(in_msg_body).end_cell();
  
      var msg = begin_cell()
            .store_uint(0x10, 6)
            .store_slice(owner_address)
            .store_grams(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_slice(sender_address)
            .store_ref(msg_body_cell)
        .end_cell();
      ;;Since according to the task, the value of Toncoin attached to the message = the value of the incoming message minus processing fees
      ;;mode mode = 64 with .store_grams(0) 
      ;;balance (100 = 100 coins), send (60-3 = 57 coins)
      send_raw_message(msg, 64);
    }
}
